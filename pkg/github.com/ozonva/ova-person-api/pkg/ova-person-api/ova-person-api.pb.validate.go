// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ova-person-api.proto

package ova_person_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersonId

	// no validation rules for UserId

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for MiddleName

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePersonRequestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePersonRequestValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePersonRequestValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreatePersonRequestValidationError is the validation error returned by
// CreatePersonRequest.Validate if the designated constraints aren't met.
type CreatePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersonRequestValidationError) ErrorName() string {
	return "CreatePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersonRequestValidationError{}

// Validate checks the field values on DescribePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersonId

	return nil
}

// DescribePersonRequestValidationError is the validation error returned by
// DescribePersonRequest.Validate if the designated constraints aren't met.
type DescribePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePersonRequestValidationError) ErrorName() string {
	return "DescribePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePersonRequestValidationError{}

// Validate checks the field values on RemovePersonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePersonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersonId

	return nil
}

// RemovePersonRequestValidationError is the validation error returned by
// RemovePersonRequest.Validate if the designated constraints aren't met.
type RemovePersonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePersonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePersonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePersonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePersonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePersonRequestValidationError) ErrorName() string {
	return "RemovePersonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePersonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePersonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePersonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePersonRequestValidationError{}

// Validate checks the field values on ListPersonsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPersonsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListPersonsRequestValidationError is the validation error returned by
// ListPersonsRequest.Validate if the designated constraints aren't met.
type ListPersonsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonsRequestValidationError) ErrorName() string {
	return "ListPersonsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonsRequestValidationError{}

// Validate checks the field values on CreatePersonResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePersonResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersonId

	return nil
}

// CreatePersonResponseValidationError is the validation error returned by
// CreatePersonResponse.Validate if the designated constraints aren't met.
type CreatePersonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePersonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePersonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePersonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePersonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePersonResponseValidationError) ErrorName() string {
	return "CreatePersonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePersonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePersonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePersonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePersonResponseValidationError{}

// Validate checks the field values on DescribePersonResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePersonResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPerson()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePersonResponseValidationError{
				field:  "Person",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribePersonResponseValidationError is the validation error returned by
// DescribePersonResponse.Validate if the designated constraints aren't met.
type DescribePersonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePersonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePersonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePersonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePersonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePersonResponseValidationError) ErrorName() string {
	return "DescribePersonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePersonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePersonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePersonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePersonResponseValidationError{}

// Validate checks the field values on RemovePersonResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePersonResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PersonId

	return nil
}

// RemovePersonResponseValidationError is the validation error returned by
// RemovePersonResponse.Validate if the designated constraints aren't met.
type RemovePersonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePersonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePersonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePersonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePersonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePersonResponseValidationError) ErrorName() string {
	return "RemovePersonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePersonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePersonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePersonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePersonResponseValidationError{}

// Validate checks the field values on ListPersonsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPersonsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPersons() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersonsResponseValidationError{
					field:  fmt.Sprintf("Persons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPersonsResponseValidationError is the validation error returned by
// ListPersonsResponse.Validate if the designated constraints aren't met.
type ListPersonsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonsResponseValidationError) ErrorName() string {
	return "ListPersonsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonsResponseValidationError{}
