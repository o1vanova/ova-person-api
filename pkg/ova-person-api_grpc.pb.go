// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_person_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonApiServiceClient is the client API for PersonApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonApiServiceClient interface {
	CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	DescribePerson(ctx context.Context, in *DescribePersonRequest, opts ...grpc.CallOption) (*DescribePersonResponse, error)
	ListPersons(ctx context.Context, in *ListPersonsRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error)
	RemovePerson(ctx context.Context, in *RemovePersonRequest, opts ...grpc.CallOption) (*RemovePersonResponse, error)
}

type personApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonApiServiceClient(cc grpc.ClientConnInterface) PersonApiServiceClient {
	return &personApiServiceClient{cc}
}

func (c *personApiServiceClient) CreatePerson(ctx context.Context, in *CreatePersonRequest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, "/api_pb.PersonApiService/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personApiServiceClient) DescribePerson(ctx context.Context, in *DescribePersonRequest, opts ...grpc.CallOption) (*DescribePersonResponse, error) {
	out := new(DescribePersonResponse)
	err := c.cc.Invoke(ctx, "/api_pb.PersonApiService/DescribePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personApiServiceClient) ListPersons(ctx context.Context, in *ListPersonsRequest, opts ...grpc.CallOption) (*ListPersonsResponse, error) {
	out := new(ListPersonsResponse)
	err := c.cc.Invoke(ctx, "/api_pb.PersonApiService/ListPersons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personApiServiceClient) RemovePerson(ctx context.Context, in *RemovePersonRequest, opts ...grpc.CallOption) (*RemovePersonResponse, error) {
	out := new(RemovePersonResponse)
	err := c.cc.Invoke(ctx, "/api_pb.PersonApiService/RemovePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonApiServiceServer is the server API for PersonApiService service.
// All implementations must embed UnimplementedPersonApiServiceServer
// for forward compatibility
type PersonApiServiceServer interface {
	CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error)
	DescribePerson(context.Context, *DescribePersonRequest) (*DescribePersonResponse, error)
	ListPersons(context.Context, *ListPersonsRequest) (*ListPersonsResponse, error)
	RemovePerson(context.Context, *RemovePersonRequest) (*RemovePersonResponse, error)
	mustEmbedUnimplementedPersonApiServiceServer()
}

// UnimplementedPersonApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonApiServiceServer struct {
}

func (UnimplementedPersonApiServiceServer) CreatePerson(context.Context, *CreatePersonRequest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersonApiServiceServer) DescribePerson(context.Context, *DescribePersonRequest) (*DescribePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePerson not implemented")
}
func (UnimplementedPersonApiServiceServer) ListPersons(context.Context, *ListPersonsRequest) (*ListPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersons not implemented")
}
func (UnimplementedPersonApiServiceServer) RemovePerson(context.Context, *RemovePersonRequest) (*RemovePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePerson not implemented")
}
func (UnimplementedPersonApiServiceServer) mustEmbedUnimplementedPersonApiServiceServer() {}

// UnsafePersonApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonApiServiceServer will
// result in compilation errors.
type UnsafePersonApiServiceServer interface {
	mustEmbedUnimplementedPersonApiServiceServer()
}

func RegisterPersonApiServiceServer(s grpc.ServiceRegistrar, srv PersonApiServiceServer) {
	s.RegisterService(&PersonApiService_ServiceDesc, srv)
}

func _PersonApiService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonApiServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.PersonApiService/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonApiServiceServer).CreatePerson(ctx, req.(*CreatePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonApiService_DescribePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonApiServiceServer).DescribePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.PersonApiService/DescribePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonApiServiceServer).DescribePerson(ctx, req.(*DescribePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonApiService_ListPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonApiServiceServer).ListPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.PersonApiService/ListPersons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonApiServiceServer).ListPersons(ctx, req.(*ListPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonApiService_RemovePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonApiServiceServer).RemovePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_pb.PersonApiService/RemovePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonApiServiceServer).RemovePerson(ctx, req.(*RemovePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonApiService_ServiceDesc is the grpc.ServiceDesc for PersonApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_pb.PersonApiService",
	HandlerType: (*PersonApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PersonApiService_CreatePerson_Handler,
		},
		{
			MethodName: "DescribePerson",
			Handler:    _PersonApiService_DescribePerson_Handler,
		},
		{
			MethodName: "ListPersons",
			Handler:    _PersonApiService_ListPersons_Handler,
		},
		{
			MethodName: "RemovePerson",
			Handler:    _PersonApiService_RemovePerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ova-person-api.proto",
}
